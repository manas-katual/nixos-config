#!/usr/bin/gjs -m
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// ../../../../../../../usr/share/astal/gjs/overrides.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland: Hyprland2, Monitor, Workspace }) => {
  patch(Hyprland2.prototype, "monitors");
  patch(Hyprland2.prototype, "workspaces");
  patch(Hyprland2.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris3, Player }) => {
  patch(Mpris3.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification: Notification2 }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification2.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp2, Audio, Video }) => {
  patch(Wp2.prototype, "endpoints");
  patch(Wp2.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../../../../usr/share/astal/gjs/process.ts
import Astal from "gi://AstalIO";
var { Process } = Astal;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal.Process.subprocessv(cmd) : Astal.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function exec(cmd) {
  return Array.isArray(cmd) ? Astal.Process.execv(cmd) : Astal.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../../../usr/share/astal/gjs/time.ts
import Astal2 from "gi://AstalIO";
var { Time } = Astal2;
function interval(interval2, callback) {
  return Astal2.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return Astal2.Time.timeout(timeout2, () => void callback?.());
}

// ../../../../../../../usr/share/astal/gjs/file.ts
import Astal3 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";
function monitorFile(path, callback) {
  return Astal3.monitor_file(path, (file, event) => {
    callback(file, event);
  });
}

// ../../../../../../../usr/share/astal/gjs/gobject.ts
import GObject from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject;
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
function register(options = {}) {
  return function(cls) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    GObject.registerClass({
      Signals: { ...cls[meta]?.Signals },
      Properties: { ...cls[meta]?.Properties },
      ...options
    }, cls);
    delete cls[meta];
  };
}
function property(declaration = Object) {
  return function(target, prop, desc) {
    target.constructor[meta] ??= {};
    target.constructor[meta].Properties ??= {};
    const name = kebabify(prop);
    if (!desc) {
      Object.defineProperty(target, prop, {
        get() {
          return this[priv]?.[prop] ?? defaultValue(declaration);
        },
        set(v) {
          if (v !== this[prop]) {
            this[priv] ??= {};
            this[priv][prop] = v;
            this.notify(name);
          }
        }
      });
      Object.defineProperty(target, `set_${name.replace("-", "_")}`, {
        value(v) {
          this[prop] = v;
        }
      });
      Object.defineProperty(target, `get_${name.replace("-", "_")}`, {
        value() {
          return this[prop];
        }
      });
      target.constructor[meta].Properties[kebabify(prop)] = pspec(name, ParamFlags.READWRITE, declaration);
    } else {
      let flags = 0;
      if (desc.get) flags |= ParamFlags.READABLE;
      if (desc.set) flags |= ParamFlags.WRITABLE;
      target.constructor[meta].Properties[kebabify(prop)] = pspec(name, flags, declaration);
    }
  };
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec)
    return declaration;
  switch (declaration) {
    case String:
      return ParamSpec.string(name, "", "", flags, "");
    case Number:
      return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
    case Boolean:
      return ParamSpec.boolean(name, "", "", flags, false);
    case Object:
      return ParamSpec.jsobject(name, "", "", flags);
    default:
      return ParamSpec.object(name, "", "", flags, declaration.$gtype);
  }
}
function defaultValue(declaration) {
  if (declaration instanceof ParamSpec)
    return declaration.get_default_value();
  switch (declaration) {
    case String:
      return "";
    case Number:
      return 0;
    case Boolean:
      return false;
    case Object:
    default:
      return null;
  }
}

// ../../../../../../../usr/share/astal/gjs/binding.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify2(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify2(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;

// ../../../../../../../usr/share/astal/gjs/variable.ts
import Astal4 from "gi://AstalIO";
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init2) {
    super();
    this._value = init2;
    this.variable = new Astal4.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = Binding.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec3, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec3 === "function") {
      this.pollFn = exec3;
      delete this.pollExec;
    } else {
      this.pollExec = exec3;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec3, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec3;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var variable_default = Variable;

// globals.ts
var user = exec(`whoami`);
var homeDir = exec(`bash -c 'echo $HOME'`);
var distro = exec(`bash -c "grep ^PRETTY_NAME /etc/os-release | cut -d '=' -f 2"`).replaceAll('"', "");
Object.assign(globalThis, {
  USER: user,
  HOME_DIR: homeDir,
  DISTRO: distro,
  TMP: `/tmp`,
  USER_SETTINGS: {
    terminal: "kitty",
    codeEditor: "nvim",
    browser: "firefox",
    animationSpeed: 300,
    notifPopupTimeout: 5e3
  },
  DEBUG_WIDGET: (color) => {
    return `background-color: ${color};`;
  }
});

// ../../../../../../../usr/share/astal/gjs/gtk3/index.ts
import Astal8 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../../../../../usr/share/astal/gjs/gtk3/astalify.ts
import Astal5 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject2 from "gi://GObject";
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof Binding ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof Binding);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify2(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function astalify(cls, clsName = cls.name) {
  class Widget extends cls {
    get css() {
      return Astal5.widget_get_css(this);
    }
    set css(css) {
      Astal5.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal5.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal5.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal5.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal5.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal5.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal5.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this.__no_implicit_destroy;
    }
    set noImplicitDestroy(value) {
      this.__no_implicit_destroy = value;
    }
    set actionGroup([prefix, group]) {
      this.insert_action_group(prefix, group);
    }
    set_action_group(actionGroup) {
      this.actionGroup = actionGroup;
    }
    _setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Bin) {
        const ch = this.get_child();
        if (ch)
          this.remove(ch);
        if (ch && !children.includes(ch) && !this.noImplicitDestroy)
          ch?.destroy();
      } else if (this instanceof Gtk.Container) {
        for (const ch of this.get_children()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      if (this instanceof Astal5.Box) {
        this.set_children(children);
      } else if (this instanceof Astal5.Stack) {
        this.set_children(children);
      } else if (this instanceof Astal5.CenterBox) {
        this.startWidget = children[0];
        this.centerWidget = children[1];
        this.endWidget = children[2];
      } else if (this instanceof Astal5.Overlay) {
        const [child, ...overlays] = children;
        this.set_child(child);
        this.set_overlays(overlays);
      } else if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}, it is not a container widget`);
      }
    }
    toggleClassName(cn, cond = true) {
      Astal5.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      if (typeof object.connect === "function" && callback) {
        const id = object.connect(signalOrCallback, (_, ...args) => {
          callback(this, ...args);
        });
        this.connect("destroy", () => {
          object.disconnect(id);
        });
      } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
        const unsub = object.subscribe((...args) => {
          signalOrCallback(this, ...args);
        });
        this.connect("destroy", unsub);
      }
      return this;
    }
    constructor(...params) {
      super();
      const [config] = params;
      const { setup, child, children = [], ...props } = config;
      props.visible ??= true;
      for (const [key, value] of Object.entries(props)) {
        if (value === void 0) {
          delete props[key];
        }
      }
      if (child)
        children.unshift(child);
      const bindings = Object.keys(props).reduce((acc, prop) => {
        if (props[prop] instanceof Binding) {
          const binding = props[prop];
          delete props[prop];
          return [...acc, [prop, binding]];
        }
        return acc;
      }, []);
      const onHandlers = Object.keys(props).reduce((acc, key) => {
        if (key.startsWith("on")) {
          const sig = kebabify2(key).split("-").slice(1).join("-");
          const handler = props[key];
          delete props[key];
          return [...acc, [sig, handler]];
        }
        return acc;
      }, []);
      const mergedChildren = mergeBindings(children.flat(Infinity));
      if (mergedChildren instanceof Binding) {
        this._setChildren(mergedChildren.get());
        this.connect("destroy", mergedChildren.subscribe((v) => {
          this._setChildren(v);
        }));
      } else {
        if (mergedChildren.length > 0) {
          this._setChildren(mergedChildren);
        }
      }
      for (const [signal, callback] of onHandlers) {
        if (typeof callback === "function") {
          this.connect(signal, callback);
        } else {
          this.connect(signal, () => execAsync(callback).then(print).catch(console.error));
        }
      }
      for (const [prop, binding] of bindings) {
        if (prop === "child" || prop === "children") {
          this.connect("destroy", binding.subscribe((v) => {
            this._setChildren(v);
          }));
        }
        this.connect("destroy", binding.subscribe((v) => {
          setProp(this, prop, v);
        }));
        setProp(this, prop, binding.get());
      }
      Object.assign(this, props);
      setup?.(this);
    }
  }
  GObject2.registerClass({
    GTypeName: `Astal_${clsName}`,
    Properties: {
      "class-name": GObject2.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject2.ParamSpec.string(
        "css",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject2.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject2.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject2.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject2.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget);
  return Widget;
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal6 from "gi://Astal?version=3.0";

// ../../../../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject3 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject3.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler: requestHandler2, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler2;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_message(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal6.Application);

// ../../../../../../../usr/share/astal/gjs/gtk3/widget.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject4 from "gi://GObject";
Object.defineProperty(Astal7.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal7.Box) {
  static {
    GObject4.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Button = class extends astalify(Astal7.Button) {
  static {
    GObject4.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal7.CenterBox) {
  static {
    GObject4.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var CircularProgress = class extends astalify(Astal7.CircularProgress) {
  static {
    GObject4.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject4.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject4.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal7.EventBox) {
  static {
    GObject4.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal7.Icon) {
  static {
    GObject4.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal7.Label) {
  static {
    GObject4.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var LevelBar = class extends astalify(Astal7.LevelBar) {
  static {
    GObject4.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var MenuButton = class extends astalify(Gtk3.MenuButton) {
  static {
    GObject4.registerClass({ GTypeName: "MenuButton" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
Object.defineProperty(Astal7.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal7.Overlay) {
  static {
    GObject4.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject4.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal7.Scrollable) {
  static {
    GObject4.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal7.Slider) {
  static {
    GObject4.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal7.Stack) {
  static {
    GObject4.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject4.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal7.Window) {
  static {
    GObject4.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// cssHotReload.ts
function compileScss() {
  try {
    exec(`sass ${"/home/qxb3/.config/ags"}/styles.scss ${TMP}/styles.css`);
    app_default.apply_css("/tmp/styles.css");
    return `${TMP}/styles.scss`;
  } catch (err) {
    printerr("Error compiling scss files.", err);
    return "";
  }
}
(function() {
  const scssFiles = exec(`find -L ${"/home/qxb3/.config/ags"} -iname '*.scss'`).split("\n");
  compileScss();
  scssFiles.forEach(
    (file) => monitorFile(file, compileScss)
  );
})();

// windows/app_launcher/vars.ts
var revealAppLauncher = Variable(false);

// windows/wallpapers/vars.ts
var revealWallpapers = Variable(false);

// windows/music_player/vars.ts
var revealMusicPlayer = Variable(false);

// windows/weather/vars.ts
var revealWeather = Variable(false);

// windows/controls/vars.ts
var revealControls = Variable(false);

// ../../../../../../../usr/share/astal/gjs/gtk3/jsx-runtime.ts
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    return new ctors[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  menubutton: MenuButton,
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx;

// windows/side_bar/SideBar.tsx
function SideBar() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "side_bar",
      spacing: 12,
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(
          "box",
          {
            className: "bun",
            css: `background-image: url("${"/home/qxb3/.config/ags"}/assets/bun.png")`,
            valign: Gtk4.Align.START
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "buttons",
            vertical: true,
            spacing: 24,
            halign: Gtk4.Align.CENTER,
            children: [
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: revealAppLauncher().as(
                    (revealed) => revealed ? "search active" : "search"
                  ),
                  cursor: "pointer",
                  onClick: () => {
                    revealAppLauncher.set(
                      !revealAppLauncher.get()
                    );
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-search-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Apps" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: revealWallpapers().as(
                    (revealed) => revealed ? "wallpaper active" : "wallpaper"
                  ),
                  cursor: "pointer",
                  onClick: () => {
                    revealWallpapers.set(
                      !revealWallpapers.get()
                    );
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-wallpaper-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Walls" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: revealMusicPlayer().as(
                    (revealed) => revealed ? "music active" : "music"
                  ),
                  cursor: "pointer",
                  onClick: () => {
                    revealMusicPlayer.set(
                      !revealMusicPlayer.get()
                    );
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-music-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Music" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: revealWeather().as(
                    (revealed) => revealed ? "weather_btn active" : "weather_btn"
                  ),
                  cursor: "pointer",
                  onClick: () => {
                    revealWeather.set(
                      !revealWeather.get()
                    );
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-weather-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Weather" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "code",
                  cursor: "pointer",
                  onClick: () => {
                    if (USER_SETTINGS.codeEditor === "vscode" || USER_SETTINGS.codeEditor === "atom" || USER_SETTINGS.codeEditor === "sublime" || USER_SETTINGS.codeEditor === "gedit" || USER_SETTINGS.codeEditor === "kate" || USER_SETTINGS.codeEditor === "geany" || USER_SETTINGS.codeEditor === "jetbrains" || USER_SETTINGS.codeEditor === "notepadqq") {
                      return execAsync(USER_SETTINGS.codeEditor);
                    }
                    execAsync(`bash -c "${USER_SETTINGS.terminal} ${USER_SETTINGS.codeEditor} ~/"`);
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-code-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Code" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "browser",
                  cursor: "pointer",
                  onClick: () => {
                    execAsync(`bash -c "${USER_SETTINGS.browser}"`);
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-browser-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Browser" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "color_picker",
                  cursor: "pointer",
                  onClick: () => {
                    execAsync(`${HOME_DIR}/.config/hypr/scripts/color-picker.sh`);
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-color-picker-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Picker" })
                  ] })
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: revealControls().as(
                    (revealed) => revealed ? "controls_btn active" : "controls_btn"
                  ),
                  cursor: "pointer",
                  onClick: () => {
                    revealControls.set(
                      !revealControls.get()
                    );
                  },
                  children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                    /* @__PURE__ */ jsx("icon", { icon: "custom-controls-symbolic" }),
                    /* @__PURE__ */ jsx("label", { label: "Controls" })
                  ] })
                }
              )
            ]
          }
        )
      ]
    }
  );
}
function SideBar_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "astal_window_side_bar",
      gdkmonitor,
      exclusivity: Astal8.Exclusivity.EXCLUSIVE,
      layer: Astal8.Layer.TOP,
      anchor: Astal8.WindowAnchor.LEFT | Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.BOTTOM,
      children: /* @__PURE__ */ jsx(SideBar, {})
    }
  );
}

// windows/top_bar/TopBar.tsx
import Hyprland from "gi://AstalHyprland";
import Network from "gi://AstalNetwork";
import Battery from "gi://AstalBattery";

// windows/network/vars.ts
var connectToAp = Variable(void 0);
var revealNetwork = Variable(false);

// windows/battery/vars.ts
var revealBattery = Variable(false);

// windows/notification_center/vars.ts
var revealNotificationCenter = Variable(false);

// windows/calendar/vars.ts
var revealCalendar = Variable(false);

// windows/top_bar/TopBar.tsx
var hyprland = Hyprland.get_default();
var network = Network.get_default();
var battery = Battery.get_default();
var time = Variable("").poll(1e3, `date +"%h %d - %I:%M %p"`);
function Left() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "left",
      halign: Gtk4.Align.START,
      children: /* @__PURE__ */ jsx(
        "label",
        {
          className: "distro",
          label: `${DISTRO}  \u30A4\u30F3\u30AF`
        }
      )
    }
  );
}
function Center() {
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "center",
      halign: Gtk4.Align.CENTER,
      children: /* @__PURE__ */ jsx(
        "box",
        {
          className: "workspaces",
          spacing: 8,
          children: Array.from({ length: 5 }).map(
            (_, i) => /* @__PURE__ */ jsx(
              "button",
              {
                className: "workspace",
                cursor: "pointer",
                valign: Gtk4.Align.CENTER,
                onClick: () => hyprland.message(`dispatch workspace ${i + 1}`),
                setup: (self) => {
                  self.hook(hyprland, "event", () => {
                    self.toggleClassName(
                      "active",
                      hyprland.get_focused_workspace().get_id() === i + 1
                    );
                  });
                }
              }
            )
          )
        }
      )
    }
  );
}
function Right() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "right",
      halign: Gtk4.Align.END,
      spacing: 10,
      children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: revealNetwork().as(
              (revealed) => revealed ? "network_btn active" : "network_btn"
            ),
            cursor: "pointer",
            onClick: () => {
              revealNetwork.set(
                !revealNetwork.get()
              );
            },
            children: bind(network, "primary").as((primary) => {
              if (primary === Network.Primary.UNKNOWN) {
                return /* @__PURE__ */ jsx("icon", { icon: "network-wireless-offline-symbolic" });
              }
              if (primary === Network.Primary.WIRED) {
                const wiredNetwork = network.get_wired();
                return /* @__PURE__ */ jsx("icon", { icon: bind(wiredNetwork, "iconName") });
              }
              if (primary === Network.Primary.WIFI) {
                const wifiNetwork = network.get_wifi();
                return /* @__PURE__ */ jsx("icon", { icon: bind(wifiNetwork, "iconName") });
              }
            })
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: revealBattery().as(
              (revealed) => revealed ? "battery_btn active" : "battery_btn"
            ),
            cursor: "pointer",
            visible: bind(battery, "isPresent"),
            onClick: () => {
              revealBattery.set(
                !revealBattery.get()
              );
            },
            children: /* @__PURE__ */ jsx(
              "icon",
              {
                icon: bind(battery, "iconName")
              }
            )
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: revealNotificationCenter().as(
              (revealed) => revealed ? "bell active" : "bell"
            ),
            cursor: "pointer",
            onClick: () => {
              revealNotificationCenter.set(
                !revealNotificationCenter.get()
              );
            },
            children: /* @__PURE__ */ jsx(
              "icon",
              {
                icon: "custom-bell-symbolic"
              }
            )
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: revealCalendar().as(
              (revealed) => revealed ? "time active" : "time"
            ),
            cursor: "pointer",
            onClick: () => {
              revealCalendar.set(
                !revealCalendar.get()
              );
            },
            children: /* @__PURE__ */ jsx(
              "label",
              {
                label: time()
              }
            )
          }
        )
      ]
    }
  );
}
function TopBar() {
  return /* @__PURE__ */ jsxs("centerbox", { className: "top_bar", children: [
    /* @__PURE__ */ jsx(Left, {}),
    /* @__PURE__ */ jsx(Center, {}),
    /* @__PURE__ */ jsx(Right, {})
  ] });
}
function TopBar_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "astal_window_top_bar",
      gdkmonitor,
      exclusivity: Astal8.Exclusivity.EXCLUSIVE,
      layer: Astal8.Layer.TOP,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.LEFT | Astal8.WindowAnchor.RIGHT,
      children: /* @__PURE__ */ jsx(TopBar, {})
    }
  );
}

// windows/network/Network.tsx
import Network2 from "gi://AstalNetwork";

// widgets/floating_window/FloatingWindow.tsx
function FloatingWindow(props) {
  const {
    className,
    title,
    gdkmonitor,
    anchor,
    transitionType,
    revealer,
    keymode,
    onKeyPressEvent,
    child,
    children
  } = props;
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "astal_window_floating",
      gdkmonitor,
      exclusivity: Astal8.Exclusivity.NORMAL,
      layer: Astal8.Layer.TOP,
      anchor,
      keymode,
      onKeyPressEvent,
      children: /* @__PURE__ */ jsx(
        "revealer",
        {
          revealChild: revealer(),
          transitionType,
          transitionDuration: USER_SETTINGS.animationSpeed,
          children: /* @__PURE__ */ jsxs(
            "box",
            {
              className: `floating_window ${className}`,
              vertical: true,
              children: [
                /* @__PURE__ */ jsx("box", { className: "title_bar", children: /* @__PURE__ */ jsxs("overlay", { children: [
                  /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "title",
                      label: title,
                      hexpand: true
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "box",
                    {
                      className: "buttons",
                      spacing: 8,
                      halign: Gtk4.Align.END,
                      valign: Gtk4.Align.CENTER,
                      hexpand: true,
                      children: Array.from({ length: 3 }).map(() => /* @__PURE__ */ jsx(
                        "button",
                        {
                          className: "button",
                          cursor: "pointer",
                          onClick: () => {
                            revealer.set(
                              !revealer.get()
                            );
                          }
                        }
                      ))
                    }
                  )
                ] }) }),
                child ?? children
              ]
            }
          )
        }
      )
    }
  );
}

// widgets/calendar/Calendar.tsx
function Calendar() {
  const currentDate = /* @__PURE__ */ new Date();
  const pageDate = Variable(currentDate);
  const grid = Variable(
    generateGridDates(
      currentDate.getMonth() + 1,
      currentDate.getFullYear()
    )
  );
  pageDate.subscribe((pageDate2) => {
    grid.set(
      generateGridDates(
        pageDate2.getMonth() + 1,
        pageDate2.getFullYear()
      )
    );
  });
  revealCalendar.subscribe((value) => {
    if (!value) {
      pageDate.set(currentDate);
    }
  });
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "calendar_widget",
      vertical: true,
      spacing: 8,
      onDestroy: () => {
        pageDate.drop();
        grid.drop();
      },
      children: [
        /* @__PURE__ */ jsxs("box", { hexpand: true, children: [
          /* @__PURE__ */ jsx(
            "label",
            {
              className: "month_year",
              label: pageDate(
                (date) => `${date.toLocaleDateString("en-US", { month: "long", year: "numeric" })}`
              )
            }
          ),
          /* @__PURE__ */ jsxs(
            "box",
            {
              spacing: 16,
              hexpand: true,
              halign: Gtk4.Align.END,
              children: [
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "control",
                    cursor: "pointer",
                    onClick: () => {
                      const prevDate = new Date(pageDate.get());
                      prevDate.setMonth(prevDate.getMonth() - 1);
                      pageDate.set(prevDate);
                    },
                    children: /* @__PURE__ */ jsx("label", { label: "<" })
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "control",
                    cursor: "pointer",
                    onClicked: () => {
                      const nextDate = new Date(pageDate.get());
                      nextDate.setMonth(nextDate.getMonth() + 1);
                      pageDate.set(nextDate);
                    },
                    children: /* @__PURE__ */ jsx("label", { label: ">" })
                  }
                )
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsx(
          "box",
          {
            spacing: 8,
            hexpand: true,
            vexpand: true,
            homogeneous: true,
            children: ["Mon", "Thu", "Wed", "Thu", "Fri", "Sat", "Sun"].map(
              (day) => /* @__PURE__ */ jsx(
                "label",
                {
                  className: "day_name",
                  label: day
                }
              )
            )
          }
        ),
        /* @__PURE__ */ jsx("box", { className: "divider" }),
        /* @__PURE__ */ jsx(
          FlowBox,
          {
            maxChildrenPerLine: 7,
            columnSpacing: 4,
            rowSpacing: 4,
            hexpand: true,
            children: grid(
              (grid2) => grid2.map(
                (weeks) => weeks.map(
                  (day) => /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: !day.inCurrent ? day.date.getFullYear() === currentDate.getFullYear() && day.date.getMonth() === currentDate.getMonth() && day.date.getDate() === currentDate.getDate() ? "today not_incurrent day" : "not_incurrent day" : day.date.getFullYear() === currentDate.getFullYear() && day.date.getMonth() === currentDate.getMonth() && day.date.getDate() === currentDate.getDate() ? "today day" : "day",
                      label: day.date.getDate().toString()
                    }
                  )
                )
              )
            )
          }
        )
      ]
    }
  );
}
function generateGridDates(month, year) {
  function daysInMonth(month2, year2) {
    const days2 = [];
    const lastDay = new Date(year2, month2, 0).getDate();
    for (let i = 1; i <= lastDay; i++) {
      days2.push(new Date(year2, month2 - 1, i));
    }
    return days2;
  }
  const firstDayOfMonth = new Date(year, month - 1, 1);
  const lastDayOfMonth = new Date(year, month, 0);
  const weekStart = 1;
  const daysOfWeek = 7;
  const firstWeekDay = (firstDayOfMonth.getDay() - weekStart + daysOfWeek) % daysOfWeek;
  const lastWeekDay = (lastDayOfMonth.getDay() - weekStart + daysOfWeek) % daysOfWeek;
  const prevMonth = month - 1 > 0 ? month - 1 : 12;
  const nextMonth = month + 1 <= 12 ? month + 1 : 1;
  const prevYear = month - 1 > 0 ? year : year - 1;
  const nextYear = month + 1 <= 12 ? year : year + 1;
  const prevMonthDays = daysInMonth(prevMonth, prevYear);
  const nextMonthDays = daysInMonth(nextMonth, nextYear);
  const leadingDays = firstWeekDay;
  const trailingDays = daysOfWeek - 1 - lastWeekDay;
  const days = [];
  if (leadingDays > 0) {
    days.push(
      ...prevMonthDays.slice(-leadingDays).map((date) => ({ inCurrent: false, date }))
    );
  }
  days.push(
    ...daysInMonth(month, year).map((date) => ({ inCurrent: true, date }))
  );
  if (trailingDays > 0) {
    days.push(
      ...nextMonthDays.slice(0, trailingDays).map((date) => ({ inCurrent: false, date }))
    );
  }
  while (days.length < 6 * daysOfWeek) {
    if (days.length < 3 * daysOfWeek) {
      days.unshift(
        ...prevMonthDays.slice(-(6 * daysOfWeek - days.length)).map((date) => ({ inCurrent: false, date }))
      );
    } else {
      days.push(
        ...nextMonthDays.slice(0, 6 * daysOfWeek - days.length).map((date) => ({ inCurrent: false, date }))
      );
    }
  }
  const weeks = [];
  for (let i = 0; i < days.length; i += daysOfWeek) {
    weeks.push(days.slice(i, i + daysOfWeek));
  }
  return weeks;
}

// widgets/notification/Notification.tsx
import Notifyd2 from "gi://AstalNotifd";
import Pango from "gi://Pango";

// utils/etc.ts
import Notifyd from "gi://AstalNotifd";
function notifUrgency(notification) {
  const { CRITICAL, NORMAL, LOW } = Notifyd.Urgency;
  switch (notification.get_urgency()) {
    case CRITICAL:
      return "critical";
    case NORMAL:
      return "normal";
    case LOW:
    default:
      return "low";
  }
}
function formatDuration(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor(seconds % 3600 / 60);
  if (hours > 0 && minutes > 0)
    return `${hours}h ${minutes}m`;
  if (hours > 0)
    return `${hours}h`;
  return `${minutes}m`;
}

// widgets/ProgressBar.ts
var ProgressBar = class extends astalify(Gtk4.ProgressBar) {
  static {
    GObject.registerClass(this);
  }
  constructor(props) {
    super(props);
  }
};

// widgets/notification/Notification.tsx
var notifyd = Notifyd2.get_default();
function NotifHeader(props) {
  const { notification, popup } = props;
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "notif_header",
      valign: Gtk4.Align.CENTER,
      spacing: 8,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "app_name",
            label: notification.get_app_name(),
            maxWidthChars: 12,
            truncate: true,
            xalign: 0,
            yalign: 1
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "time",
            label: default2.DateTime.new_from_unix_local(notification.get_time()).format("\u2022 %I:%M %p"),
            xalign: 0,
            yalign: 1
          }
        ),
        !popup && /* @__PURE__ */ jsx(
          "button",
          {
            className: "close",
            cursor: "pointer",
            halign: Gtk4.Align.END,
            valign: Gtk4.Align.CENTER,
            hexpand: true,
            onClick: () => {
              notification.dismiss();
            },
            children: /* @__PURE__ */ jsx(
              "icon",
              {
                className: "icon",
                icon: "window-close-symbolic"
              }
            )
          }
        )
      ]
    }
  );
}
function NotifContent(props) {
  const { notification } = props;
  return /* @__PURE__ */ jsx("box", { className: "content", children: /* @__PURE__ */ jsx("box", { spacing: 8, children: /* @__PURE__ */ jsxs(
    "box",
    {
      vertical: true,
      spacing: 4,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "summary",
            label: `\u2022 ${notification.get_summary()}`,
            maxWidthChars: 32,
            truncate: true,
            xalign: 0
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "body",
            label: notification.get_body().replace(/(\r\n|\n|\r)/gm, " "),
            maxWidthChars: 32,
            wrapMode: Pango.WrapMode.WORD_CHAR,
            wrap: true,
            truncate: true,
            lines: 3,
            xalign: 0
          }
        )
      ]
    }
  ) }) });
}
function NotifActions(props) {
  const { notification } = props;
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "actions",
      vertical: true,
      spacing: 8,
      children: [
        /* @__PURE__ */ jsx(Gtk4.Separator, { visible: true }),
        /* @__PURE__ */ jsx("box", { spacing: 4, children: notification.get_actions().map((action) => /* @__PURE__ */ jsx(
          "button",
          {
            className: "action",
            cursor: "pointer",
            hexpand: true,
            onClick: () => {
              notification.invoke(action.id);
            },
            children: /* @__PURE__ */ jsx(
              "label",
              {
                className: "name",
                label: action.label,
                halign: Gtk4.Align.CENTER,
                hexpand: true
              }
            )
          }
        )) })
      ]
    }
  );
}
function NotificationWidget(props) {
  const { notification, popup, popupTimeout } = props;
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: `widget_notification ${popup ? "popup" : ""}`,
      onDestroy: () => popupTimeout?.drop(),
      children: [
        popup && /* @__PURE__ */ jsx(
          "box",
          {
            className: `urgency ${notifUrgency(notification)}`,
            vexpand: true
          }
        ),
        /* @__PURE__ */ jsxs("box", { vertical: true, children: [
          /* @__PURE__ */ jsxs(
            "box",
            {
              vertical: true,
              hexpand: true,
              spacing: 8,
              children: [
                /* @__PURE__ */ jsx(
                  NotifHeader,
                  {
                    notification,
                    popup
                  }
                ),
                /* @__PURE__ */ jsx(Gtk4.Separator, { visible: true }),
                /* @__PURE__ */ jsx(NotifContent, { notification }),
                notification.get_actions().length > 0 && /* @__PURE__ */ jsx(NotifActions, { notification })
              ]
            }
          ),
          popup && /* @__PURE__ */ jsx(
            "box",
            {
              className: "popup_timeout",
              children: /* @__PURE__ */ jsx(
                ProgressBar,
                {
                  className: "progress",
                  fraction: popupTimeout?.(),
                  valign: Gtk4.Align.CENTER,
                  hexpand: true
                }
              )
            }
          )
        ] })
      ]
    }
  );
}
function Notification(props) {
  const {
    notification,
    reveal = false,
    popup = false,
    onClick,
    onHoverLost,
    onPopupTimeoutDone
  } = props;
  const downRevealer = Variable(reveal);
  const sideRevealer = Variable(reveal);
  let popupTimeout;
  if (popup) {
    const rate = 50;
    const speed = rate / (USER_SETTINGS.notifPopupTimeout - USER_SETTINGS.animationSpeed);
    popupTimeout = Variable(0).poll(rate, (time2) => Math.min(time2 + speed, 1));
    timeout(USER_SETTINGS.notifPopupTimeout, () => {
      onPopupTimeoutDone?.(remove);
    });
  }
  function remove() {
    sideRevealer.set(false);
    timeout(USER_SETTINGS.animationSpeed, () => {
      downRevealer.set(false);
      timeout(USER_SETTINGS.animationSpeed, () => {
        if (!notificationWidget.destroyed(notificationWidget))
          notificationWidget.destroy();
      });
    });
  }
  const notificationWidget = /* @__PURE__ */ jsx(
    "eventbox",
    {
      cursor: popup ? "pointer" : "",
      onClick: () => onClick?.(remove),
      onHoverLost: () => onHoverLost?.(remove),
      onDestroy: () => {
        downRevealer.drop();
        sideRevealer.drop();
        popupTimeout?.drop();
      },
      children: /* @__PURE__ */ jsx("box", { vertical: true, children: /* @__PURE__ */ jsx(
        "revealer",
        {
          revealChild: downRevealer(),
          transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
          transitionDuration: USER_SETTINGS.animationSpeed,
          onRealize: () => {
            timeout(1, () => {
              downRevealer.set(true);
            });
          },
          children: /* @__PURE__ */ jsx("box", { halign: Gtk4.Align.END, children: /* @__PURE__ */ jsx(
            "revealer",
            {
              revealChild: sideRevealer(),
              transitionType: Gtk4.RevealerTransitionType.SLIDE_LEFT,
              transitionDuration: USER_SETTINGS.animationSpeed,
              onRealize: () => {
                timeout(USER_SETTINGS.animationSpeed, () => {
                  sideRevealer.set(true);
                });
              },
              children: /* @__PURE__ */ jsx(
                NotificationWidget,
                {
                  notification,
                  popup,
                  popupTimeout
                }
              )
            }
          ) })
        }
      ) })
    }
  );
  const resolvedHandler = notifyd.connect("resolved", (_, id) => {
    if (id !== notification.get_id() && !popup)
      return;
    notifyd.disconnect(resolvedHandler);
    remove();
  });
  return notificationWidget;
}

// widgets/FlowBox.ts
var FlowBox = class extends astalify(Gtk4.FlowBox) {
  static {
    GObject.registerClass(this);
  }
  constructor(props) {
    super(props);
  }
};

// widgets/CheckBox.ts
var CheckButton = class extends astalify(Gtk4.CheckButton) {
  static {
    GObject.registerClass(this);
  }
  constructor(props) {
    super(props);
  }
};

// windows/network/Network.tsx
var wifi = Network2.get_default().get_wifi();
if (wifi.state) {
  wifi.scan();
}
function ApDropdownNotConnected(props) {
  const { ap } = props;
  const password = Variable("");
  const showPassword = Variable(false);
  const err = Variable("");
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "dropdown",
      vertical: true,
      spacing: 24,
      onDestroy: () => {
        password.drop();
        showPassword.drop();
        err.drop();
      },
      children: [
        /* @__PURE__ */ jsxs(
          "box",
          {
            vertical: true,
            spacing: 8,
            children: [
              /* @__PURE__ */ jsxs(
                "overlay",
                {
                  className: "password_container",
                  passThrough: true,
                  children: [
                    /* @__PURE__ */ jsx(
                      "entry",
                      {
                        className: "password",
                        hexpand: true,
                        visibility: showPassword(),
                        css: showPassword(
                          (show) => show ? "letter-spacing: 1px;" : "letter-spacing: 4px;"
                        ),
                        onChanged: (self) => {
                          password.set(self.text);
                        }
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "label",
                      {
                        className: "placeholder",
                        label: password(
                          (password2) => password2.length <= 0 ? "Password" : ""
                        ),
                        xalign: 0
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ jsxs("box", { spacing: 8, children: [
                /* @__PURE__ */ jsx(
                  CheckButton,
                  {
                    className: "show_password",
                    cursor: "pointer",
                    halign: Gtk4.Align.START,
                    valign: Gtk4.Align.CENTER,
                    onButtonPressEvent: (self) => {
                      self.connect("notify::active", () => {
                        showPassword.set(self.active);
                      });
                    }
                  }
                ),
                /* @__PURE__ */ jsx("label", { label: "Show Password" })
              ] })
            ]
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            vertical: true,
            spacing: 2,
            children: [
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "connect",
                  cursor: "pointer",
                  onClick: () => {
                    if (password.get().length <= 0)
                      return err.set("Password needs 8+ chars long");
                    console.log(ap.get_ssid());
                    console.log(password.get());
                    subprocess(
                      `nmcli dev wifi connect ${ap.get_ssid()} password ${password.get()}`,
                      () => {
                      },
                      () => err.set(`Failed to connect: ${ap.get_ssid()}`)
                    );
                  },
                  children: /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "label",
                      label: "Connect"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "err",
                  label: err(),
                  visible: err().as((err2) => err2.length > 0)
                }
              )
            ]
          }
        )
      ]
    }
  );
}
function ApDropdownConnected(props) {
  const { activeAp } = props;
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "dropdown",
      vertical: true,
      children: /* @__PURE__ */ jsx(
        "button",
        {
          className: "disconnected",
          cursor: "pointer",
          onClick: () => {
            execAsync(`nmcli connection delete ${activeAp?.get_ssid()}`);
          },
          children: /* @__PURE__ */ jsx(
            "label",
            {
              className: "label",
              label: "Disconnected"
            }
          )
        }
      )
    }
  );
}
function Ap(props) {
  const { ap, activeAp } = props;
  const menuRevealer = Variable(false);
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "ap",
      vertical: true,
      spacing: 8,
      onDestroy: () => menuRevealer.drop(),
      children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            cursor: "pointer",
            onClick: () => {
              menuRevealer.set(
                !menuRevealer.get()
              );
            },
            children: /* @__PURE__ */ jsxs(
              "box",
              {
                className: "details",
                spacing: 8,
                valign: Gtk4.Align.CENTER,
                children: [
                  /* @__PURE__ */ jsx(
                    "icon",
                    {
                      className: "icon",
                      icon: bind(ap, "iconName")
                    }
                  ),
                  /* @__PURE__ */ jsxs("box", { children: [
                    /* @__PURE__ */ jsx(
                      "label",
                      {
                        className: "ssid",
                        label: bind(ap, "ssid").as(
                          (ssid) => `${ssid} ${activeAp?.get_ssid() === ssid ? "(Connected)" : ""}`
                        ),
                        maxWidthChars: 24,
                        valign: Gtk4.Align.CENTER,
                        truncate: true,
                        xalign: 0,
                        yalign: 0
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "icon",
                      {
                        className: "down-icon",
                        icon: menuRevealer().as(
                          (revealed) => revealed ? "go-up-symbolic" : "go-down-symbolic"
                        )
                      }
                    )
                  ] })
                ]
              }
            )
          }
        ),
        /* @__PURE__ */ jsxs(
          "revealer",
          {
            revealChild: menuRevealer(),
            transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
            transitionDuration: USER_SETTINGS.animationSpeed,
            children: [
              activeAp?.get_ssid() === ap.get_ssid() && /* @__PURE__ */ jsx(ApDropdownConnected, { activeAp }),
              activeAp?.get_ssid() !== ap.get_ssid() && /* @__PURE__ */ jsx(ApDropdownNotConnected, { ap })
            ]
          }
        )
      ]
    }
  );
}
function Header() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "header",
      valign: Gtk4.Align.CENTER,
      spacing: 8,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "title",
            label: "Wifi Networks",
            valign: Gtk4.Align.CENTER,
            yalign: 0
          }
        ),
        /* @__PURE__ */ jsx(
          "switch",
          {
            className: "switch",
            cursor: "pointer",
            state: bind(wifi, "enabled"),
            setup: (self) => {
              self.connect("notify::active", () => {
                wifi.set_enabled(self.state);
              });
            }
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "refresh",
            cursor: "pointer",
            halign: Gtk4.Align.END,
            hexpand: true,
            onClick: () => {
              wifi.scan();
            },
            children: /* @__PURE__ */ jsx(
              "icon",
              {
                className: "icon",
                icon: "view-refresh-symbolic"
              }
            )
          }
        )
      ]
    }
  );
}
function WifiNetworks() {
  return /* @__PURE__ */ jsx("scrollable", { vexpand: true, children: /* @__PURE__ */ jsx(
    "box",
    {
      className: "wifi_networks",
      vertical: true,
      children: Variable.derive(
        [
          bind(wifi, "accessPoints"),
          bind(wifi, "activeAccessPoint")
        ],
        (aps, activeAp) => {
          const groupedAPs = aps.reduce((acc, ap) => {
            const ssid = ap.ssid?.trim();
            if (ssid)
              (acc[ssid] ||= []).push(ap);
            return acc;
          }, {});
          const sortedAPGroups = Object.values(groupedAPs).map((apGroup) => {
            apGroup.sort((a, b) => {
              if (a === activeAp) return -1;
              if (b === activeAp) return 1;
              return b.get_strength() - a.get_strength();
            });
            return apGroup[0];
          });
          sortedAPGroups.sort((a, b) => {
            if (a === activeAp) return -1;
            if (b === activeAp) return 1;
            return b.get_strength() - a.get_strength();
          });
          return sortedAPGroups.map((ap) => /* @__PURE__ */ jsx(
            Ap,
            {
              ap,
              activeAp
            }
          ));
        }
      )()
    }
  ) });
}
function NoWifiNetwork() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "no_wifi_network",
      vertical: true,
      vexpand: true,
      spacing: 12,
      children: [
        /* @__PURE__ */ jsx(
          "icon",
          {
            className: "icon",
            icon: "network-wireless-offline-symbolic"
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "title",
            label: "Wifi Disconnected"
          }
        )
      ]
    }
  );
}
function NetworkWindow() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "content",
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(Header, {}),
        /* @__PURE__ */ jsx(Gtk4.Separator, { visible: true }),
        bind(wifi, "enabled").as(
          (enabled) => enabled ? /* @__PURE__ */ jsx(WifiNetworks, {}) : /* @__PURE__ */ jsx(NoWifiNetwork, {})
        )
      ]
    }
  );
}
function Network_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "network",
      title: Variable.derive(
        [
          bind(wifi, "enabled"),
          bind(wifi, "scanning")
        ],
        (enabled, scanning) => {
          if (!enabled) return "Network";
          if (scanning) return "Network (scanning)";
          else return "Network";
        }
      )(),
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.RIGHT,
      revealer: revealNetwork,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
      keymode: Astal8.Keymode.ON_DEMAND,
      children: /* @__PURE__ */ jsx(NetworkWindow, {})
    }
  );
}

// windows/battery/Battery.tsx
import Battery2 from "gi://AstalBattery";

// services/BatteryLogs.ts
var BatteryLogs = class extends GObject.Object {
  get logs() {
    return this._logs;
  }
  set logs(logs) {
    this._logs = logs;
  }
  get_logs() {
    return this.logs;
  }
  constructor() {
    super();
    this.logsPath = `${HOME_DIR}/.cache/ags/battery.json`;
    this._logs = this.get_logs_file();
    monitorFile(this.logsPath, () => {
      this._logs = this.get_logs_file();
      this.notify("logs");
    });
  }
  get_logs_file() {
    const logsFile = exec(`cat ${this.logsPath}`);
    return JSON.parse(logsFile);
  }
  static get_default() {
    return new BatteryLogs();
  }
};
__decorateClass([
  property(String)
], BatteryLogs.prototype, "logsPath", 2);
__decorateClass([
  property(Object)
], BatteryLogs.prototype, "logs", 1);
BatteryLogs = __decorateClass([
  register()
], BatteryLogs);

// windows/battery/Battery.tsx
var battery2 = Battery2.get_default();
var batteryLogs = BatteryLogs.get_default();
function BatteryWindow() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "content",
      vertical: true,
      spacing: 16,
      children: [
        /* @__PURE__ */ jsxs(
          "box",
          {
            valign: Gtk4.Align.CENTER,
            spacing: 4,
            children: [
              /* @__PURE__ */ jsx(
                "icon",
                {
                  className: "battery_icon",
                  icon: bind(battery2, "iconName")
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "percentage",
                  label: bind(battery2, "percentage").as((percentage) => `${Math.round(percentage * 100)}%`),
                  xalign: 0,
                  yalign: 0
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsx(
          "label",
          {
            className: "time_left",
            label: Variable.derive(
              [
                bind(battery2, "state"),
                bind(battery2, "timeToFull"),
                bind(battery2, "timeToEmpty")
              ],
              (state, timeToFull, timeToEmpty) => {
                switch (state) {
                  case Battery2.State.CHARGING:
                    return `Time To Full: ${formatDuration(timeToFull)}`;
                  case Battery2.State.DISCHARGING:
                    return `Time To Empty: ${formatDuration(timeToEmpty)}`;
                  case Battery2.State.FULLY_CHARGED:
                    return `Fully Charged`;
                  default:
                    return `Unknown State`;
                }
              }
            )()
          }
        ) }),
        /* @__PURE__ */ jsx(Gtk4.Separator, { visible: true }),
        bind(batteryLogs, "logs").as((logs) => /* @__PURE__ */ jsx(
          "box",
          {
            className: "graph",
            valign: Gtk4.Align.END,
            css: `min-height: 125px;`,
            homogeneous: true,
            spacing: 4,
            children: Array.from({ length: 24 }).map((_, i) => {
              const log = logs.slice(-24)[i] || { battery_level: 1 };
              return /* @__PURE__ */ jsx(
                "box",
                {
                  vertical: true,
                  valign: Gtk4.Align.END,
                  children: /* @__PURE__ */ jsx(
                    "box",
                    {
                      className: "bar",
                      css: `min-height: ${log.battery_level}px;`
                    }
                  )
                }
              );
            })
          }
        ))
      ]
    }
  );
}
function Battery_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "battery",
      title: "Battery",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.RIGHT,
      revealer: revealBattery,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
      children: /* @__PURE__ */ jsx(BatteryWindow, {})
    }
  );
}

// windows/notification_popups/NotificationPopups.tsx
import Notifyd3 from "gi://AstalNotifd";
var notifyd2 = Notifyd3.get_default();
function NotifPopupList() {
  const popups = /* @__PURE__ */ new Map();
  return /* @__PURE__ */ jsx(
    "box",
    {
      className: "popups",
      vertical: true,
      vexpand: true,
      spacing: 4,
      setup: (self) => {
        function onNotify(id) {
          const notification = notifyd2.get_notification(id);
          if (!notification || notifyd2.get_dont_disturb())
            return;
          const uniqueID = default2.uuid_string_random();
          const notificationWidget = Notification({
            notification,
            popup: true,
            onClick: (remove) => onRemove(uniqueID, remove),
            onHoverLost: (remove) => onRemove(uniqueID, remove),
            onPopupTimeoutDone: (remove) => onRemove(uniqueID, remove)
          });
          revealNotificationCenter.set(false);
          revealCalendar.set(false);
          popups.set(uniqueID, notificationWidget);
          self.pack_start(notificationWidget, false, false, 0);
        }
        function onRemove(id, remove) {
          if (!popups.has(id))
            return;
          popups.delete(id);
          remove();
        }
        self.hook(notifyd2, "notified", (_, id) => onNotify(id));
      }
    }
  );
}
function NotificationPopups() {
  return /* @__PURE__ */ jsx("box", { className: "notification_popups", children: /* @__PURE__ */ jsx(NotifPopupList, {}) });
}
function NotificationPopups_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    "window",
    {
      namespace: "astal_window_notification_popups",
      gdkmonitor,
      exclusivity: Astal8.Exclusivity.NORMAL,
      layer: Astal8.Layer.OVERLAY,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.RIGHT,
      children: /* @__PURE__ */ jsx(NotificationPopups, {})
    }
  );
}

// windows/notification_center/NotificationCenter.tsx
import Notifyd4 from "gi://AstalNotifd";
var notifyd3 = Notifyd4.get_default();
var notificationSize = Variable(0);
function Header2() {
  return /* @__PURE__ */ jsxs("box", { className: "header", children: [
    /* @__PURE__ */ jsxs("box", { spacing: 8, children: [
      /* @__PURE__ */ jsx(
        "icon",
        {
          className: "icon",
          icon: "custom-bell-symbolic"
        }
      ),
      /* @__PURE__ */ jsx(
        "label",
        {
          className: "title",
          label: "Notifications"
        }
      )
    ] }),
    /* @__PURE__ */ jsx("box", { hexpand: true }),
    /* @__PURE__ */ jsx(
      "button",
      {
        className: "clear",
        cursor: "pointer",
        onClick: () => {
          notifyd3.get_notifications().map((n, i) => {
            timeout(USER_SETTINGS.animationSpeed * i / 3, () => {
              n.dismiss();
            });
          });
        },
        children: /* @__PURE__ */ jsx(
          "icon",
          {
            className: "icon",
            icon: "edit-clear-symbolic"
          }
        )
      }
    )
  ] });
}
function NotificationList() {
  return /* @__PURE__ */ jsx("scrollable", { vexpand: true, children: /* @__PURE__ */ jsx(
    "box",
    {
      className: "notifications",
      spacing: 16,
      vertical: true,
      hexpand: true,
      setup: (self) => {
        const notifications = /* @__PURE__ */ new Map();
        function onAdded(id) {
          const notification = notifyd3.get_notification(id);
          if (!notification)
            return;
          const replace = notifications.get(id);
          if (replace)
            replace.destroy();
          const notificationWidget = Notification({ notification, reveal: !!replace });
          notifications.set(id, notificationWidget);
          notificationSize.set(notifications.size);
          self.pack_start(notificationWidget, false, false, 0);
        }
        function onRemove(id) {
          if (!notifications.has(id))
            return;
          notifications.delete(id);
          notificationSize.set(notifications.size);
        }
        self.hook(notifyd3, "notified", (_, id) => onAdded(id));
        self.hook(notifyd3, "resolved", (_, id) => onRemove(id));
        notifyd3.get_notifications().map((notification, i) => {
          timeout(USER_SETTINGS.animationSpeed * i / 3, () => {
            onAdded(notification.get_id());
          });
        });
      }
    }
  ) });
}
function NoNotification() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "no_notification",
      visible: notificationSize.get() <= 0,
      valign: Gtk4.Align.CENTER,
      hexpand: true,
      vexpand: true,
      vertical: true,
      spacing: 12,
      setup: (self) => {
        self.hook(notificationSize, () => {
          if (notificationSize.get() > 0)
            self.visible = false;
          if (notificationSize.get() <= 0) {
            timeout(USER_SETTINGS.animationSpeed, () => {
              self.visible = true;
            });
          }
        });
      },
      children: [
        /* @__PURE__ */ jsx(
          "icon",
          {
            className: "icon",
            icon: "custom-slash-bell-symbolic"
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "title",
            label: "No Notification",
            hexpand: true
          }
        )
      ]
    }
  );
}
function NotificationCenter() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "content",
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(Header2, {}),
        /* @__PURE__ */ jsx(Gtk4.Separator, { visible: true }),
        /* @__PURE__ */ jsx(NoNotification, {}),
        /* @__PURE__ */ jsx(NotificationList, {})
      ]
    }
  );
}
function NotificationCenter_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "notification_center",
      title: "Notifications",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.RIGHT,
      revealer: revealNotificationCenter,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
      children: /* @__PURE__ */ jsx(NotificationCenter, {})
    }
  );
}

// windows/app_launcher/AppLauncher.tsx
import Applications from "gi://AstalApps";
var applications = new Applications.Apps({
  nameMultiplier: 2,
  entryMultiplier: 0,
  executableMultiplier: 2
});
var query = Variable("");
var queriedApplications = Variable(applications.fuzzy_query(""));
var selectedApplication = Variable(queriedApplications.get()[0]);
var selectedIndex = Variable(0);
function QueryBox() {
  return /* @__PURE__ */ jsxs(
    "overlay",
    {
      className: "query_box",
      passThrough: true,
      hexpand: true,
      children: [
        /* @__PURE__ */ jsx("box", { className: "query_container", children: /* @__PURE__ */ jsx(
          "entry",
          {
            className: "query",
            hexpand: true,
            onChanged: ({ text }) => {
              query.set(text);
              queriedApplications.set(applications.fuzzy_query(text));
              selectedApplication.set(queriedApplications.get()[0]);
            },
            setup: (self) => {
              self.hook(revealAppLauncher, () => {
                if (!revealAppLauncher.get()) {
                  self.text = "";
                  queriedApplications.set(applications.fuzzy_query(""));
                  selectedApplication.set(queriedApplications.get()[0]);
                  selectedIndex.set(0);
                }
                self.grab_focus();
              });
            }
          }
        ) }),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "placeholder",
            label: query().as(
              (query2) => query2.length <= 0 ? "Search Apps" : ""
            ),
            xalign: 0
          }
        )
      ]
    }
  );
}
function ApplicationList() {
  return /* @__PURE__ */ jsx(
    "scrollable",
    {
      className: "applications",
      hexpand: true,
      vexpand: true,
      children: /* @__PURE__ */ jsx(
        FlowBox,
        {
          maxChildrenPerLine: 4,
          hexpand: true,
          valign: Gtk4.Align.START,
          children: queriedApplications(
            (applications2) => applications2.map((app) => /* @__PURE__ */ jsx(
              "button",
              {
                className: selectedApplication().as(
                  (selectedApp) => selectedApp.get_name() === app.get_name() ? "application selected" : "application"
                ),
                cursor: "pointer",
                halign: Gtk4.Align.START,
                onClick: () => {
                  app.launch();
                  revealAppLauncher.set(false);
                },
                children: /* @__PURE__ */ jsx(
                  "box",
                  {
                    spacing: 8,
                    halign: Gtk4.Align.CENTER,
                    valign: Gtk4.Align.CENTER,
                    children: /* @__PURE__ */ jsx(
                      "icon",
                      {
                        className: "icon",
                        icon: app.get_icon_name()
                      }
                    )
                  }
                )
              }
            ))
          )
        }
      )
    }
  );
}
function AppLauncher() {
  return /* @__PURE__ */ jsxs("box", { vertical: true, children: [
    /* @__PURE__ */ jsx("box", { spacing: 8, children: /* @__PURE__ */ jsx(ApplicationList, {}) }),
    /* @__PURE__ */ jsx(QueryBox, {})
  ] });
}
function AppLauncher_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "app_launcher",
      title: "App Launcher",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.LEFT,
      revealer: revealAppLauncher,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
      keymode: revealAppLauncher().as(
        (revealed) => revealed ? Astal8.Keymode.EXCLUSIVE : Astal8.Keymode.NONE
      ),
      onKeyPressEvent: (_, event) => {
        const keyval = event.get_keyval().pop();
        switch (keyval) {
          case Gdk.KEY_Escape:
            return revealAppLauncher.set(false);
          case Gdk.KEY_Tab:
          case Gdk.KEY_Down:
            if (queriedApplications.get().length <= 0) return;
            if (selectedIndex.get() < queriedApplications.get().length - 1) {
              selectedIndex.set(selectedIndex.get() + 1);
              selectedApplication.set(queriedApplications.get()[selectedIndex.get()]);
            }
            break;
          case Gdk.KEY_Up:
            if (queriedApplications.get().length <= 0) return;
            if (selectedIndex.get() > 0) {
              selectedIndex.set(selectedIndex.get() - 1);
              selectedApplication.set(queriedApplications.get()[selectedIndex.get()]);
            }
            break;
          case Gdk.KEY_Return:
            if (!selectedApplication.get()) return;
            selectedApplication.get().launch();
            revealAppLauncher.set(false);
            break;
        }
      },
      children: /* @__PURE__ */ jsx(AppLauncher, {})
    }
  );
}

// windows/calendar/Calendar.tsx
function Calendar_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "calendar",
      title: "Calendar",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.RIGHT,
      revealer: revealCalendar,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
      children: /* @__PURE__ */ jsx(Calendar, {})
    }
  );
}

// windows/wallpapers/Wallpapers.tsx
function getWallpapers() {
  return exec(`find -L ${HOME_DIR}/.config/swww -iname '*.png'`).split("\n");
}
function Wallpapers() {
  const wallpapers = getWallpapers();
  return /* @__PURE__ */ jsx(
    "scrollable",
    {
      hexpand: true,
      vexpand: true,
      children: /* @__PURE__ */ jsx(
        FlowBox,
        {
          className: "content",
          maxChildrenPerLine: 2,
          column_spacing: 8,
          rowSpacing: 8,
          children: wallpapers.map((wallpaper) => /* @__PURE__ */ jsx(
            "button",
            {
              cursor: "pointer",
              halign: Gtk4.Align.CENTER,
              onClick: () => {
                execAsync(`swww img ${wallpaper}`);
                revealWallpapers.set(false);
              },
              children: /* @__PURE__ */ jsx(
                "box",
                {
                  className: "wallpaper",
                  css: `background-image: url("${wallpaper}");`
                }
              )
            }
          ))
        }
      )
    }
  );
}
function Wallpapers_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "wallpapers",
      title: "Wallpapers",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.LEFT,
      revealer: revealWallpapers,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
      children: /* @__PURE__ */ jsx(Wallpapers, {})
    }
  );
}

// windows/music_player/MusicPlayer.tsx
import Mpris from "gi://AstalMpris";
var spotify = Mpris.Player.new("spotify");
function CoverArt() {
  return /* @__PURE__ */ jsx("box", { children: bind(spotify, "available").as((isAvailable) => /* @__PURE__ */ jsx(
    "box",
    {
      className: "cover_art",
      halign: Gtk4.Align.CENTER,
      css: bind(spotify, "coverArt").as(
        (coverArt) => isAvailable ? `background-image: url("${coverArt}");` : `background-image: url("${"/home/qxb3/.config/ags"}/assets/no_music.png");`
      )
    }
  )) });
}
function Meta() {
  return /* @__PURE__ */ jsx("box", { children: bind(spotify, "available").as((isAvailable) => /* @__PURE__ */ jsxs(
    "box",
    {
      className: "meta",
      vertical: true,
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "title",
            label: bind(spotify, "title").as((title) => isAvailable ? title : "No Music"),
            maxWidthChars: 18,
            hexpand: true,
            truncate: true
          }
        ),
        /* @__PURE__ */ jsx(
          "label",
          {
            className: "artist",
            label: bind(spotify, "artist").as((aritst) => isAvailable ? aritst : "Artist"),
            maxWidthChars: 18,
            hexpand: true,
            truncate: true
          }
        )
      ]
    }
  )) });
}
function Controls() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "controls",
      homogeneous: true,
      children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "prev",
            cursor: "pointer",
            onClick: () => {
              spotify.previous();
            },
            children: /* @__PURE__ */ jsx(
              "icon",
              {
                className: "icon",
                icon: "media-skip-backward-symbolic"
              }
            )
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "prev",
            cursor: "pointer",
            onClick: () => {
              spotify.play_pause();
            },
            children: /* @__PURE__ */ jsx(
              "icon",
              {
                className: "icon",
                icon: bind(spotify, "playbackStatus").as(
                  (status) => status === Mpris.PlaybackStatus.STOPPED ? "media-playback-stop-symbolic" : status === Mpris.PlaybackStatus.PLAYING ? "media-playback-pause-symbolic" : "media-playback-start-symbolic"
                )
              }
            )
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: "prev",
            cursor: "pointer",
            onClick: () => {
              spotify.next();
            },
            children: /* @__PURE__ */ jsx(
              "icon",
              {
                className: "icon",
                icon: "media-skip-forward-symbolic"
              }
            )
          }
        )
      ]
    }
  );
}
function Position() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "position",
      valign: Gtk4.Align.CENTER,
      spacing: 8,
      vertical: true,
      children: [
        bind(spotify, "length").as((length) => /* @__PURE__ */ jsx(
          ProgressBar,
          {
            className: "progress",
            fraction: bind(spotify, "position").as((position) => position / length),
            valign: Gtk4.Align.CENTER,
            hexpand: true
          }
        )),
        bind(spotify, "available").as((isAvailable) => /* @__PURE__ */ jsxs("box", { className: "meta", children: [
          /* @__PURE__ */ jsx(
            "label",
            {
              className: "current_progress",
              label: bind(spotify, "position").as(
                (position) => !isAvailable || position <= 0 ? "0:00" : `${Math.floor(position / 60)}:${String(Math.round(position) % 60).padStart(2, "0")}`
              )
            }
          ),
          /* @__PURE__ */ jsx(
            "box",
            {
              className: "seperator",
              valign: Gtk4.Align.CENTER,
              hexpand: true
            }
          ),
          /* @__PURE__ */ jsx(
            "label",
            {
              className: "current_progress",
              label: bind(spotify, "length").as(
                (length) => !isAvailable ? "0:00" : `${Math.floor(length / 60)}:${String(Math.round(length) % 60).padStart(2, "0")}`
              )
            }
          )
        ] }))
      ]
    }
  );
}
function MusicPlayer() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "content",
      vertical: true,
      spacing: 12,
      children: [
        /* @__PURE__ */ jsx(CoverArt, {}),
        /* @__PURE__ */ jsx(Meta, {}),
        /* @__PURE__ */ jsx(Controls, {}),
        /* @__PURE__ */ jsx(Position, {})
      ]
    }
  );
}
function MusicPlayer_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "music_player",
      title: "Spotify",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.LEFT,
      revealer: revealMusicPlayer,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
      children: /* @__PURE__ */ jsx(MusicPlayer, {})
    }
  );
}

// utils/fetch.ts
import GLib from "gi://GLib";
import Gio2 from "gi://Gio";
var init = false;
async function libnotify() {
  try {
    import("gi://Soup?version=3.0");
  } catch (error) {
    console.error(Error("Missing dependency: libsoup3"));
    return null;
  }
  const Soup = (await import("gi://Soup?version=3.0")).default;
  if (init)
    return Soup;
  init = true;
  Gio2._promisify(Soup.Session.prototype, "send_async");
  Gio2._promisify(Gio2.MemoryOutputStream.prototype, "splice_async");
  return Soup;
}
var Response = class {
  status;
  statusText;
  ok;
  stream;
  type = "basic";
  constructor(status, statusText, ok, stream) {
    this.status = status;
    this.statusText = statusText;
    this.ok = ok;
    this.stream = stream;
  }
  async json() {
    const text = await this.text();
    return JSON.parse(text);
  }
  async text() {
    const gBytes = await this.gBytes();
    return new TextDecoder().decode(gBytes?.toArray());
  }
  async arrayBuffer() {
    const gBytes = await this.gBytes();
    if (!gBytes)
      return null;
    return gBytes.toArray().buffer;
  }
  async gBytes() {
    const outputStream = Gio2.MemoryOutputStream.new_resizable();
    if (!this.stream)
      return null;
    await outputStream.splice_async(
      this.stream,
      Gio2.OutputStreamSpliceFlags.CLOSE_TARGET | Gio2.OutputStreamSpliceFlags.CLOSE_SOURCE,
      GLib.PRIORITY_DEFAULT,
      null
    );
    return outputStream.steal_as_bytes();
  }
};
async function fetch(url, options = {}) {
  const Soup = await libnotify();
  if (!Soup) {
    console.error(Error("missing dependency: libsoup3"));
    return new Response(
      400,
      "can not fetch: missing dependency: libsoup3",
      false,
      null
    );
  }
  const session = new Soup.Session();
  if (options.params) {
    url += "?" + Object.entries(options.params).map(([key, value]) => {
      if (Array.isArray(value)) {
        return value.map((val) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join("&");
      } else if (typeof value === "object") {
        return `${encodeURIComponent(key)}=${encodeURIComponent(
          JSON.stringify(value)
        )}`;
      } else {
        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
      }
    }).join("&");
  }
  const message = new Soup.Message({
    method: options.method || "GET",
    uri: GLib.Uri.parse(url, GLib.UriFlags.NONE)
  });
  if (options.headers) {
    for (const key of Object.keys(options.headers))
      message.get_request_headers().append(key, options.headers[key]);
  }
  if (typeof options.body === "string") {
    message.set_request_body_from_bytes(
      null,
      new GLib.Bytes(new TextEncoder().encode(options.body))
    );
  }
  const inputStream = await session.send_async(message, 0, null);
  const { status_code, reason_phrase } = message;
  const ok = status_code >= 200 && status_code < 300;
  return new Response(status_code, reason_phrase, ok, inputStream);
}

// services/Weather.ts
var Weather = class extends GObject.Object {
  get_location() {
    if (this.location)
      return this.location;
  }
  get_weather() {
    if (this.weather)
      return this.weather;
  }
  async _get_location() {
    try {
      const locationResponse = await fetch("http://ip-api.com/json", { method: "GET" });
      const location = await locationResponse.json();
      if (location.status === "fail")
        throw Error("Failed to fetch location");
      if (location.status === "success") {
        this.location = {
          country: location.country,
          regionName: location.regionName,
          city: location.city,
          timezone: location.timezone,
          latitude: location.lat,
          longitude: location.lon
        };
      }
    } catch (err) {
      console.log(`Error while fetching location: ${err}`);
    }
  }
  async _get_weather() {
    this.status = "fetching";
    await this._get_location();
    try {
      const weatherResponse = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${this.location.latitude}&longitude=${this.location.longitude}&current=temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,apparent_temperature,weather_code,wind_speed_80m&timeformat=unixtime&timezone=auto&forecast_days=1`, { method: "GET" });
      const weather2 = await weatherResponse.json();
      this.weather = {
        current: {
          time: new Date(weather2.current.time * 1e3),
          temperature: weather2.current.temperature_2m,
          humidity: weather2.current.relative_humidity_2m,
          precipitation: weather2.current.precipitation,
          readableWeather: this._get_readable_weather(weather2.current.weather_code),
          weatherCode: weather2.current.weather_code,
          windSpeed: weather2.current.wind_speed_10m,
          icon: this._get_icon(weather2.current.weather_code)
        },
        hourly: weather2.hourly.time.map((time2, i) => ({
          time: new Date(time2 * 1e3),
          temperature: weather2.hourly.temperature_2m[i],
          humidity: weather2.hourly.relative_humidity_2m[i],
          weatherCode: weather2.hourly.weather_code[i],
          windSpeed: weather2.hourly.wind_speed_80m[i],
          readableWeather: this._get_readable_weather(weather2.hourly.weather_code[i]),
          icon: this._get_icon(weather2.hourly.weather_code[i])
        }))
      };
      this.status = "fetched";
    } catch (err) {
      console.log(`Error while fetching weather: ${err}`);
    }
  }
  _get_icon(weatherCode) {
    switch (weatherCode) {
      case 0 /* CLEAR_SKY */:
        return "weather-clear-symbolic";
      case 3 /* CLOUDY */:
        return "weather-few-clouds-symbolic";
      case 61 /* FOGGY */:
        return "weather-fog-symbolic";
      case 55 /* DRIZZLE */ | 57 /* FREEZING_DRIZZLE */:
        return "weather-showers-scattered-symbolic";
      case 127 /* RAIN */ | 83 /* RAIN_SHOWERS */ | 67 /* FREEZING_RAIN */:
        return "weather-showers-symbolic";
      case 79 /* SNOW */ | 77 /* SNOW_GRAINS */ | 87 /* SNOW_SHOWERS */:
        return "weather-snow-symbolic";
      case 95 /* THUNDERSTORM */ | 99 /* THUNDERSTORM_HEAVY_HAIL */:
        return "weather-storm-symbolic";
      case -1 /* DEFAULT */:
      default:
        return "weather-overcast-symbolic";
    }
  }
  _get_readable_weather(weatherCode) {
    switch (weatherCode) {
      case 0 /* CLEAR_SKY */:
        return "Clear Sky";
      case 3 /* CLOUDY */:
        return "Cloudy";
      case 61 /* FOGGY */:
        return "Foggy";
      case 55 /* DRIZZLE */ | 57 /* FREEZING_DRIZZLE */:
        return "Drizzle";
      case 127 /* RAIN */ | 83 /* RAIN_SHOWERS */ | 67 /* FREEZING_RAIN */:
        return "Rain";
      case 79 /* SNOW */ | 77 /* SNOW_GRAINS */ | 87 /* SNOW_SHOWERS */:
        return "Snow";
      case 95 /* THUNDERSTORM */ | 99 /* THUNDERSTORM_HEAVY_HAIL */:
        return "Thunderstorm";
      case -1 /* DEFAULT */:
      default:
        return "N/A";
    }
  }
  constructor() {
    super();
    this.location = {
      country: "N/A",
      regionName: "N/A",
      city: "N/A",
      timezone: "N/A",
      latitude: 0,
      longitude: 0
    };
    this.weather = {
      current: {
        time: /* @__PURE__ */ new Date(),
        temperature: 0,
        humidity: 0,
        precipitation: 0,
        weatherCode: 0,
        windSpeed: 0,
        readableWeather: this._get_readable_weather(-1 /* DEFAULT */),
        icon: this._get_icon(-1 /* DEFAULT */)
      },
      hourly: Array.from({ length: 24 }).map(() => ({
        time: /* @__PURE__ */ new Date(),
        temperature: 1,
        humidity: 0,
        weatherCode: 0,
        windSpeed: 0,
        readableWeather: this._get_readable_weather(-1 /* DEFAULT */),
        icon: this._get_icon(-1 /* DEFAULT */)
      }))
    };
    this._get_weather();
    interval(6e5, () => {
      this._get_weather();
    });
  }
  static get_default() {
    return new Weather();
  }
};
__decorateClass([
  property(Object)
], Weather.prototype, "location", 2);
__decorateClass([
  property(Object)
], Weather.prototype, "weather", 2);
__decorateClass([
  property(Object)
], Weather.prototype, "status", 2);
Weather = __decorateClass([
  register()
], Weather);

// windows/weather/Weather.tsx
var weather = Weather.get_default();
function WeatherWin() {
  return /* @__PURE__ */ jsx("box", { className: "content", children: bind(weather, "weather").as((weatherData) => /* @__PURE__ */ jsxs(
    "box",
    {
      vertical: true,
      spacing: 8,
      children: [
        /* @__PURE__ */ jsxs(
          "box",
          {
            valign: Gtk4.Align.CENTER,
            spacing: 8,
            children: [
              /* @__PURE__ */ jsxs("box", { spacing: 8, children: [
                /* @__PURE__ */ jsx(
                  "icon",
                  {
                    className: "weather_icon",
                    icon: weatherData.current.icon,
                    valign: Gtk4.Align.CENTER
                  }
                ),
                /* @__PURE__ */ jsxs("box", { className: "temp_container", children: [
                  /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "temp",
                      label: `${Math.round(weatherData.current.temperature)}`,
                      valign: Gtk4.Align.CENTER
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "label",
                    {
                      className: "unit",
                      label: "\xB0C",
                      valign: Gtk4.Align.START
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ jsx(
                "box",
                {
                  className: "divider",
                  hexpand: true
                }
              ),
              /* @__PURE__ */ jsxs(
                "box",
                {
                  className: "details",
                  halign: Gtk4.Align.END,
                  vertical: true,
                  children: [
                    /* @__PURE__ */ jsx(
                      "label",
                      {
                        className: "city",
                        label: bind(weather, "location").as((location) => location.city)
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "label",
                      {
                        className: "time",
                        label: weatherData.current.time.toLocaleTimeString([], {
                          hour: "2-digit",
                          minute: "2-digit"
                        }),
                        xalign: 1
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "label",
                      {
                        className: "readable_weather",
                        label: weatherData.current.readableWeather,
                        xalign: 1
                      }
                    )
                  ]
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            className: "etc",
            vertical: true,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "precitipation",
                  label: `Precipitation: ${Math.round(weatherData.current.precipitation)}%`,
                  xalign: 0
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "humidity",
                  label: `Humidity: ${Math.round(weatherData.current.humidity)}%`,
                  xalign: 0
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "wind_speed",
                  label: `Wind: ${Math.round(weatherData.current.windSpeed)} km/h`,
                  xalign: 0
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsx(
          "box",
          {
            className: "graph",
            css: `min-height: ${Math.max(...weatherData.hourly.map((w) => w.temperature / 100 * 250))}`,
            valign: Gtk4.Align.END,
            homogeneous: true,
            spacing: 4,
            children: weatherData.hourly.map((hourly) => /* @__PURE__ */ jsx(
              "box",
              {
                vertical: true,
                valign: Gtk4.Align.END,
                children: /* @__PURE__ */ jsx(
                  "box",
                  {
                    className: "bar",
                    css: `min-height: ${Math.round(hourly.temperature / 100 * 250)}px;`
                  }
                )
              }
            ))
          }
        )
      ]
    }
  )) });
}
function Weather_default(gdkmonitor) {
  /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "weather",
      title: "Weather",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.LEFT,
      revealer: revealWeather,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
      children: /* @__PURE__ */ jsx(WeatherWin, {})
    }
  );
}

// windows/controls/Controls.tsx
import Wp from "gi://AstalWp";
import Mpris2 from "gi://AstalMpris";

// services/Brightness.ts
var Brightness = class extends GObject.Object {
  get brightness() {
    return this._brightness;
  }
  set brightness(value) {
    value = Math.max(0, Math.min(value, 1));
    execAsync(`brightnessctl set ${value * 100}% -q`);
  }
  get_brightness() {
    return this.brightness;
  }
  set_brightness(value) {
    this.brightness = value;
  }
  constructor() {
    super();
    this.interface = exec(`sh -c 'ls -w1 /sys/class/backlight | head -1'`).trim();
    this.interfacePath = `/sys/class/backlight/${this.interface}/brightness`;
    this.maxBrightness = Number(exec(`brightnessctl max`));
    this._brightness = Number(exec(`brightnessctl get`)) / this.maxBrightness;
    monitorFile(this.interfacePath, () => {
      this._brightness = Number(exec(`brightnessctl get`)) / this.maxBrightness;
      this.notify("brightness");
    });
  }
  static get_default() {
    return new Brightness();
  }
};
__decorateClass([
  property(String)
], Brightness.prototype, "interface", 2);
__decorateClass([
  property(String)
], Brightness.prototype, "interfacePath", 2);
__decorateClass([
  property(Number)
], Brightness.prototype, "maxBrightness", 2);
__decorateClass([
  property(Number)
], Brightness.prototype, "brightness", 1);
Brightness = __decorateClass([
  register()
], Brightness);

// windows/controls/Controls.tsx
var audio = Wp.get_default().audio;
var spotify2 = Mpris2.Player.new("spotify");
var brightness = Brightness.get_default();
function Controls2() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "content",
      vertical: true,
      spacing: 12,
      children: [
        bind(audio, "defaultSpeaker").as((speaker) => /* @__PURE__ */ jsxs(
          "box",
          {
            vertical: true,
            spacing: 4,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: bind(speaker, "mute").as((isMute) => isMute ? "name mute" : "name"),
                  label: bind(speaker, "description").as((desc) => `${desc}:`),
                  xalign: 0
                }
              ),
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: "slider",
                  cursor: "pointer",
                  value: bind(speaker, "volume"),
                  max: 1.5,
                  step: 0.01,
                  drawValue: false,
                  hexpand: true,
                  onDragged: ({ value }) => speaker.set_volume(value)
                }
              )
            ]
          }
        )),
        /* @__PURE__ */ jsxs(
          "box",
          {
            vertical: true,
            spacing: 4,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: bind(spotify2, "volume").as((volume) => volume <= 0 ? "name mute" : "name"),
                  label: bind(spotify2, "identity").as((identity) => `${identity}:`),
                  xalign: 0
                }
              ),
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: "slider",
                  cursor: "pointer",
                  value: bind(spotify2, "volume"),
                  max: 1,
                  step: 0.01,
                  drawValue: false,
                  hexpand: true,
                  onDragged: ({ value }) => spotify2.set_volume(value)
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            vertical: true,
            spacing: 4,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  className: "name",
                  label: "Brightness:",
                  xalign: 0
                }
              ),
              /* @__PURE__ */ jsx(
                "slider",
                {
                  className: "slider",
                  cursor: "pointer",
                  value: bind(brightness, "brightness"),
                  max: 1,
                  step: 0.1,
                  drawValue: false,
                  hexpand: true,
                  onDragged: ({ value }) => brightness.set_brightness(value)
                }
              )
            ]
          }
        )
      ]
    }
  );
}
function Controls_default(gdkmonitor) {
  return /* @__PURE__ */ jsx(
    FloatingWindow,
    {
      className: "controls_window",
      title: "Controls",
      gdkmonitor,
      anchor: Astal8.WindowAnchor.TOP | Astal8.WindowAnchor.LEFT,
      revealer: revealControls,
      transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
      children: /* @__PURE__ */ jsx(Controls2, {})
    }
  );
}

// requestHandler.ts
function handleRevealer(command, revealer) {
  switch (command) {
    case 0 /* OPEN */:
      revealer.set(true);
      return `${revealer.get()}`;
    case 1 /* CLOSE */:
      revealer.set(false);
      return `${revealer.get()}`;
    case 2 /* TOGGLE */:
      revealer.set(!revealer.get());
      return `${revealer.get()}`;
  }
}
function requestHandler(request, res) {
  const args = request.split(":");
  switch (args[0]) {
    case "app_launcher":
      switch (args[1]) {
        case "open":
          return handleRevealer(0 /* OPEN */, revealAppLauncher);
        case "close":
          return handleRevealer(1 /* CLOSE */, revealAppLauncher);
        case "toggle":
          return handleRevealer(2 /* TOGGLE */, revealAppLauncher);
        default:
          return "Unknown command for app_launcher.";
      }
    case "wallpapers":
      switch (args[1]) {
        case "open":
          return handleRevealer(0 /* OPEN */, revealWallpapers);
        case "close":
          return handleRevealer(1 /* CLOSE */, revealWallpapers);
        case "toggle":
          return handleRevealer(2 /* TOGGLE */, revealWallpapers);
        default:
          return "Unknown command for wallpapers.";
      }
    case "notification_center":
      switch (args[1]) {
        case "open":
          return handleRevealer(0 /* OPEN */, revealNotificationCenter);
        case "close":
          return handleRevealer(1 /* CLOSE */, revealNotificationCenter);
        case "toggle":
          return handleRevealer(2 /* TOGGLE */, revealNotificationCenter);
        default:
          return "Unknown command for notification_center.";
      }
    default:
      return res("Unknown request.");
  }
}

// app.ts
app_default.start({
  css: compileScss(),
  icons: `${"/home/qxb3/.config/ags"}/assets/icons`,
  main() {
    const mainMonitor = app_default.get_monitors().at(0);
    SideBar_default(mainMonitor);
    TopBar_default(mainMonitor);
    Network_default(mainMonitor);
    Battery_default(mainMonitor);
    NotificationPopups_default(mainMonitor);
    NotificationCenter_default(mainMonitor);
    AppLauncher_default(mainMonitor);
    Calendar_default(mainMonitor);
    Wallpapers_default(mainMonitor);
    MusicPlayer_default(mainMonitor);
    Weather_default(mainMonitor);
    Controls_default(mainMonitor);
  },
  requestHandler
});
//# sourceMappingURL=data:application/json;base64,
